package com.pack.test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

class Test1
{
	private String s;//Fields
	
	public Test1()
	{
		s="Hello";
	}
	
	public void method1()
	{
		System.out.println("The String is "+s);
	}
	
	public void method2(int num)
	{
		System.out.println("The Number is "+num);
	}
	
	private void method3()
	{
		System.out.println("Private method is invoked");
	}
}
public class ReflectionDemo {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
     Test1 obj = new Test1();
     
     Class<? extends Test1> classObj= obj.getClass();  
     System.out.println("The Name of Class is "+classObj.getName());
     
     Constructor<? extends Test1> constructor = classObj.getConstructor();
     System.out.println("The name of constructor is "+constructor.getName());
     
     System.out.println("The All Public methods of Test1 class are below");
     
     Method[] methods = classObj.getDeclaredMethods();
     for(Method method:methods)
     {
    	 System.out.println(method.getName());
     }
     
     //calling method by providing method name and method parameter.class 
     //as arg to getDeclaredMethod()
     Method methodcall1 = classObj.getDeclaredMethod("method1", int.class);
     
     //invoke method through object of class
     methodcall1.invoke(obj, 20);
     
     //creating desired field by providing the name of 
     //filed as arg to getDeclaredField() 
     Field field = classObj.getDeclaredField("s");
     field.setAccessible(true);// set access specifier to true to access private field
     //dynamically change private field value at runtime
     field.set(obj, "JAVA");
     
     
     //Creating object fir desired method by passing 
     //name of method as arg to getDeclaredMethod()
     Method methodCall3= classObj.getDeclaredMethod("method3");
     
     methodCall3.setAccessible(true);
     
     methodCall3.invoke(obj);
     
     
     
     
     
	}

}
